'use client'

import { useEffect, useState } from 'react'
import QuizStep from '@/components/quiz/QuizStep'
import ResultsGrid from '@/components/quiz/ResultsGrid'

type PlywoodProduct = {
    id: number
    type: string
    thickness: number
    format: string
    grade: string
    manufacturer: string
    waterproofing: string
    price: number
    image: string
}

type Answers = {
    type: string
    thickness: string
    format: string
    grade: string
    manufacturer: string
}

export default function QuizPage() {
    const [step, setStep] = useState(0)
    const [answers, setAnswers] = useState<Answers>({
        type: '', thickness: '', format: '', grade: '', manufacturer: ''
    })
    const [results, setResults] = useState<PlywoodProduct[]>([])
    const [loading, setLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)

    const steps = [
        { title: '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–∞–Ω–µ—Ä–∏', field: 'type', options: ['–§–°–§','–§–ö','–§–ö–ú','–õ–∞–º—ñ–Ω–æ–≤–∞–Ω–∞','–î–ª—è –õ–∞–∑–µ—Ä–∞','–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞','–î–ª—è –û–ø–∞–ª—É–±–∫–∏'] },
        { title: '–Ø–∫—É —Ç–æ–≤—â–∏–Ω—É –≤–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ?', field: 'thickness', options: ['9','12','15','18','21'] },
        { title: '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç', field: 'format', options: ['900x600','1525x1525','2500x1250','3000x1500'] },
        { title: '–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ä—Ç —Ñ–∞–Ω–µ—Ä–∏', field: 'grade', options: ['B/B (1/1)','B/BB (1/2)','BB/BB (2/2)','BB/C (2/4)','C/C (4/4)','CP/C (3/4)'] },
        { title: '–û–±–µ—Ä—ñ—Ç—å –≤–∏—Ä–æ–±–Ω–∏–∫–∞', field: 'manufacturer', options: ['–£–∫—Ä–∞—ó–Ω–∞','–ü–æ–ª—å—â–∞','–ö–∏—Ç–∞–π','Kronospan','–û–¥–µ–∫'] }
    ]

    const handleChange = (value: string) => {
        const field = steps[step].field as keyof Answers
        setAnswers(prev => ({ ...prev, [field]: value }))
    }

    const handleNext = () => setStep(prev => prev + 1)
    const handlePrev = () => setStep(prev => prev - 1)

    useEffect(() => {
        if (step !== steps.length) return
        const fetchResults = async () => {
            try {
                setLoading(true); setError(null)
                const res = await fetch('/api/recommend', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(answers)
                })
                if (!res.ok) throw new Error(`HTTP ${res.status}`)
                const data = await res.json()
                setResults(Array.isArray(data) ? data : [])
            } catch (e) {
                setError('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.')
            } finally {
                setLoading(false)
            }
        }
        fetchResults()
    }, [step]) // eslint-disable-line react-hooks/exhaustive-deps

    const currentField = steps[step]?.field
    const currentValue = (currentField ? answers[currentField as keyof Answers] : '') ?? ''

    return (
        <div className="mx-auto px-4 py-12 bg-white flex flex-col items-center">
            {/* Header */}
            <div className="text-center max-w-5xl mx-auto mb-10">
                <h1 className="text-4xl sm:text-5xl font-extrabold leading-tight text-black">
                    –û–±–µ—Ä–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∏—Ä—ñ–± ‚Äî —É –∫—ñ–ª—å–∫–∞ –∫–ª—ñ–∫—ñ–≤
                </h1>
                <p className="text-base sm:text-lg text-gray-500 mt-4">
                    –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–≤—ñ–∑ —ñ –º–∏ –ø—ñ–¥–±–µ—Ä–µ–º–æ –¥–ª—è —Ç–µ–±–µ –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —ñ–∑ –Ω–∞—à–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó.
                </p>
            </div>

            {/* Card container: –æ–¥–Ω–∞ –≤—ã—Å–æ—Ç–∞ –¥–ª—è —à–∞–≥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            <div className="min-h-[520px] flex items-stretch justify-center w-full max-w-5xl">
                {step < steps.length ? (
                    <div className="w-full">
                        <QuizStep
                            title={steps[step].title}
                            field={currentField}
                            options={steps[step].options}
                            selectedValue={currentValue}
                            onChange={handleChange}
                            onNext={handleNext}
                            onPrev={handlePrev}
                            isFirst={step === 0}
                            isLast={step === steps.length - 1}
                            currentStep={step}
                            totalSteps={steps.length}
                        />
                    </div>
                ) : loading ? (
                    <div className="w-full grid place-items-center py-16">
                        <p className="text-center text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...</p>
                    </div>
                ) : error ? (
                    <div className="text-center text-red-600">{error}</div>
                ) : results.length > 0 ? (
                    <ResultsGrid
                        items={results}
                        onEditFilters={() => setStep(steps.length - 1)}
                    />
                ) : (
                    <div className="text-center text-gray-600 flex flex-col items-center justify-center w-full py-12">
                        <p className="text-lg font-medium mb-2">–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ üòî</p>
                        <p className="text-sm text-gray-400 mb-6">–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –æ–¥–∏–Ω –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø—ñ–¥–±–æ—Ä—É.</p>
                        <button
                            onClick={() => setStep(steps.length - 1)}
                            className="px-6 py-2 rounded-md border border-black text-black hover:bg-black hover:text-white transition"
                        >
                            ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥
                        </button>
                    </div>
                )}
            </div>
        </div>
    )
}
